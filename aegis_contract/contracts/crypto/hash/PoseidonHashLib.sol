
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

library PoseidonHashLib {
    /**
     * Poseidon Hash Parameters For this implementation:
     * - rate = 2
     * - capacity = 1
     * - width = rate + capacity = 3
     * - alpha = 5
     * - fullRounds = 8 (4 + 4)
     * - partialRounds = 57
    */

    uint constant p = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint constant RATE = 2;
    uint constant N_FULL_ROUNDS = 4;
    uint constant N_PARTIAL_ROUNDS = 57;

    uint constant MDS00 = 1;
    uint constant MDS01 = 0;
    uint constant MDS02 = 1;
    uint constant MDS10 = 1;
    uint constant MDS11 = 1;
    uint constant MDS12 = 0;
    uint constant MDS20 = 0;
    uint constant MDS21 = 1;
    uint constant MDS22 = 1;

    function _hash(uint x, uint y) public pure returns (uint) {
        uint[3][65] memory arc = [[9663093820545814020186852789982091357189682503969720037880413419211326604949, 9988141599141161295087659196785533316141058479677968722011989885839174279094, 9771279882254596819370093359454047740484659295585010913573407581542711178519], [8202853098572421109552931162547246572279937395104783711277980569977771384082, 19006448313466322477822922030669732253768119464786702888493990792654980581230, 5543735016926887371652939093909736601952354179125175009192521186651259957024], [18048336943414489551719580879375053590349676464233628978974642446627453572968, 9518959341419866874079128031721467843107392866153505950455581082022286234073, 13776990384032896612089491069819000764024692974467388508306283251093265961829], [4974485857831579407833804011115291860628743132538782983851148246578596524354, 4582058706826847859402049408596838331645785215209650694246100228764154465983, 18839216606202798060836714661782044236410541500741574759182988659447918200543], [17749085791181687004485144019680639466385383069316052305295326457173994533823, 3667050043582613257999258393804437271099591868046159530355672746269938402261, 19412892334526430394291272853180613889745191681954271380688137424539182112085], [2419764815478606200192510690642047247774053961876886339302423160912692712834, 10422070438742802318304761163378857193617201286999452515942829205664363475240, 17195071263529564925797089929861347867899146654377563911705282130829904275765], [5937744182934106756889987310277472164137865050129234343928294102842374492865, 13773738649451172722993852427007904532738375055892394097746091696660575414449, 11138896669580421106707148903006192582575133946419564516651856291781787185270], [13618129003664538830105664977514745825664790598139710143815263618301257993798, 6407894124248281800837648026073085331239800575078274073884551874190747273556, 13100201391093626654314104056848179813955936042244364647536441248774676140391], [3274322435328077518908546906746390031390220783169486573349605592861722123965, 19655874299107789562390759238499998501819261448388875874258024323441864577610, 8966916055036468936597292314361080988838884669443641324694666888640086591828], [19005690431695305907969377548183900254570496758598407408882964268896732330249, 9370835972415485005265254334155904447544738871874160817589364575899923071952, 2024569808468765118537888925032045370375931377849440580954474591437195904763], [5217059524991837503991081930214372165466125076062079605841780445529724323640, 16864140145823461913644379771569724806582352263738705364388112129737787532709, 20298760555655017039681954738051176824890381150228039133337025709365267383078], [911254622661071206720789260987256803671244353981502512842106707199579077218, 8142351072906602887258972148082217885596803495993509019769770973798168520293, 3756805531944660364934501981553222057852059661520378329919407740941704444399], [7443881344464273767777144220222950356383245546895418572399639169213525988684, 213162597798911315378642736146486863342324271170328765761538025154812823965, 6609537870174225305334433159465352778911931415230943534590659921951181423655], [1942207790282858235257175755659140939705836493208513135606439505913224214324, 4643344142058985202808550413835482072891665365175962231253026331275083386214, 16902514452128513452044143696816953299297901712491291099052847652726588711940], [16953940937578596040977476375074978356846334503237756676357752726171231746041, 11490825759957437147998427740172882896682283579918357363391953126816109144157, 17242788441189971564630571556169331471124089856073369971283542565640623072184], [19068035877072635426328498420564038634993987442575920354218728631020045431240, 12584862122228223748598689234282358400520185662388409008064628689981547770018, 12272068597511826235464349344860956722261899753088824443350948812302902983408], [2956441712951352323179868765711466208115374547000469836229778503569636299010, 20949734737169932367683856051634674227772995357269265171324064260087239259690, 9724032188083024336241254686244016021947669121871099564773310407261658926051], [19328230900184735381559772291750272837876269396367369484999576591788887103208, 13684357016079926817739941178790345814445722839066321489193630397822534078073, 3193541825191407312749476786891188551982366795543382914787346901822210371150], [10768751669753970988704716009590896012882040068608955152310272409384353364530, 6168528209138071494438431595436729937688706721661453808738932101386471847955, 15766134869274515284026456385839839468917689732396218097686779178493402676574], [3363181592813972467467524648219565472829641750737324126516100842829396881055, 19382680127333111623228731369375587943005182472252092263478245451947520158272, 2487714038678148227148859571683150765364757720871868661392987740989519448435], [13079673796180499828307518989976706961331504908684899291178409367073994138779, 4047632692616463343723896868855535982765925541867247131401892337226014788604, 4292863446817773204397873458668964185297687139684176310324568965759438601486], [17535892318117396860662719195880664856267814348378229079236442979590633529275, 4357506619316357278959674749561773765495295011272055567877503089903193370508, 4816791685483623282188804372685051555472231166129498578131709275163027513035], [573037971939724412564306248986709230666323421801019723667713862130432217607, 9187558248134427187694803610361767964011992579882629806686613604706360781292, 17635028889909528257363650108519024771879872250341831540310884043186962688992], [3190255891130788065200852985454666350780642499541339600798223872785670021055, 11031128579137531833517371521540505473757803782011818413761104406462525420017, 9906633139780190274209267853971789676108666127891187175006265673120164982675], [3567542404993742986804927536416775197092808836456053224601263144388936519509, 16235093975704048746381884498645787351081293970620531157621630963070357167987, 2080873789852351527318684505131060682559191775624596337862867691637789569557], [856113385301768819737852404129217526711032635117668937867340793762435114566, 3415532182278154657935191084338120693679194124779770683368994297563651413166, 875211475034612215100466108904568437576043812464330142776472318417163630917], [16171862661350718426420446974912974393748424749944403933899940947141706405437, 2852776350159531011150118556177550751562390691828001814282181434950278510242, 320783788206698578871016861411605848890828419382039087916235566926467409751], [7822331724613629637553182683096567643556879309320029335161878653058073045596, 17272843625482038166711339305566847364399485379381718956581672197417131305282, 17044328889940046318041734995244148531864722351776960671509668549883947644289], [7302903401624305072945159618024559266235238516156278084947223046018494530196, 20791030503169690900411661056936924243378601846479918418158033605161111126614, 19575983870873400157069732434960486384376759943726702852293647438389148227792], [8654080503514497525525206119965671005401699838513357995092829853963170568674, 15882675248603268541114623106417302788516898057125598421625160560070449454558, 19982677891795721487436321819199746384147124499461427518180263877803223812841], [9225217520401186178622703660518628426083540354630230392711160265837991982814, 18720486074617721957809596226452113891952416141495421988315879999142984056659, 1693207462739245553766279740526435096402829307071075994836626135694427022007], [5686269878562603893075761492922759025107973331716407377296379767184675256994, 8104129497497619708211702285693501963907767141496948714850337273773927035816, 11407791993153884061055190536317689878937492893506106265426817863474485082344], [21128362995009384827880546354144465258993744217347462484290842072404191515291, 18714971489785380184566619721027244702840730977562273138447961320858414619270, 11378119660179500533380418167537152914926785450538846080838429463962077172078], [838797429956672817863649493516359331721421447013831472146476932178674805570, 6064120987120338968430327872188019298453702285911013149224323987906578289526, 19509294877732557488279145611565110890771141062620943986228248883605196562199], [8224664370716298892562608073887939497427387747402497874011876463588195701053, 8725109341835448798363235886445782928855622619726124644696112643145760638067, 12673087476782721200848165737479515379914876581910153228533752758889280028247], [19892882461716117383338465983622834527257875141030686217018224524778435191492, 16356171978942173154112928510357398659985684374441667169637795620278290543307, 13584690703092049204663729435640303018021370099882781271046897660064128816432], [20833564075258463896166262207288031177034560912159637298707178084586816058663, 5069417870305160197972500024031031217582590396650485218395931810349743446327, 5733281278026047730489297843258525616931514129476017946686847216201372126046], [14847432976127227247836155062249815189908741881354403942757194986046736389636, 13289205052343963204030587486851372443430227058320923384498757999031198105327, 2126277458199480476764828342438180533170260109210428068698178609259347623175], [18886993350897758662661069991988932258919102103733688205722346286441671941648, 11969126226927115231628100981694274182301821104280069323376659313476646365317, 10479787181483070920097759467169338625381819591561498053377772413540746861441], [11557639659271356493121622209004469377923686380143303541654186800304178372454, 8066327232659215121608116151443485206897945241520615850058736017836912962509, 18582632041606733562437756613179029454472626888081574415166902022753524480904], [11723978570356678029772458950970204513543774340218399393756013340814510714758, 724952649466294609075662940368734774561235634748722273316877348548993552287, 2747081562357208360136496645396698906307280658407848270565084680975758980675], [19392026384499316809888305473620869384988307232700202436641335522439800518395, 20349126957248330528332502867469180916225549382185881952276677691944313153882, 10824883238194299565383117504060046582106242910646986756747017730717631636410], [7894330596845398438269471372342160947605579501485388615314078897901571892670, 18501912567199434683703383759050125036572411489345532042888768875565039065159, 18282013384735841459502414852062318775134077534013181600048542981584884211969], [12942538081255198631641440367400792567597099746124691158930989139389479428929, 8091541247841052959537872334867421646343214627721916407083040244921599639983, 5911693079449465644712619749404572640452706760241278230329957633257677162355], [6936159101995362321043213084004629959986853322054899648390806400656500974112, 60167371269387770315617222792774220712007958673077380427071681145555797422, 1573251537264611838827217846759033746809361132063238556492626051209123110286], [17779500062357544015711688119842021780925716682738427396666380176369556550386, 5170366659600264903060390786275657385140519155836865791801305587453792495056, 6861607452138538010725812984659611027524384202040043730141219120203397649377], [12149509615600807997376610339945234772386688117264859373346500102722110231569, 8902994966293498644846546133061414327154347000710954421106415771948465277300, 5164237546340617634151022044526476595957351780391094800785109542885997912466], [17291922538607287809426885526221706189458378912446959551440006467850047633258, 20673127920864251979453238794552334193794063716393406954510136164152094498143, 17410846286803053369232353475820969373378974623686300056097210739931309482151], [2243193697671241151946301553648143294202119738119782202722786895991883440536, 8508481670324753730417455376345371860990997004620759036830734449421325130978, 5070858489343354781360045248450353193608064425641664012805145968359756218489], [2976734597374556429812746025231317066985150276548129918509627690860891164055, 8820198688261291332400031833360329801142113894200105348902846252198404456274, 9294493214637324657821921879276291288748964321788293121217015819010133358146], [20408078779850963733810214437051350917307195940703697913863435302936375076148, 8791480171395681794895611814095520911972395639758314864295661966781324673902, 7558713992202709015613815709505084007381537220972589166261835453575907288367], [18442988075862880117287481974538657122040334602558258688889685386839958719034, 13889113412140400561397386854478194827609068496796796682045444655835924816976, 15224749352102561472152575532806931705762652307553821017208024800605209760688], [13235071928743895211711847611949625463930135997759491172535445121852607753784, 5817165954451546238086465615800299108783853154659156079906779604880823657494, 16590889181396099252130003390580882093197361862499371846564728020127817478639], [20507900959498466256120910437425108152824329108823482319073016268163885694830, 8202682806116654099600021567524236174269941292864325391284157563014838454268, 13657289444865996952808256407438728479587104415763396720617818282428874072579], [3415183118597670825683283028851598470605313898816012302817353445501968909170, 6594039733793340648005289164326358415012660314071477555980260844314477623587, 17011047359618691026423636063005061582825816753936633860916449076180083225359], [11666097909004079748850301282103607436388782457568237656921098362409830035071, 8011701714262139831052482041246695735640260939514427008810973117346177768497, 15794853389134256708426731143732073400825390002482616325919574775503681883217], [4969970037224521551105785932424185702325826116189243154110158974807571877479, 20325278691906554075253325615871770347183217524500240911781778426125177084611, 17537492907702398798001371576567682635690911848405947646238559986407203176763], [4727058796437721780588512548662061090895365586519583058717292768589690077622, 4896199084949062082491192780344607837893284595423798002654633393488682120799, 7624487289843754235970909230421977354220166681219017537553249464495163128680], [17203652942996170862627727847669074467936912077820327405332155428496345363046, 5314395177313768999194841251306170738359373825515249223611194369155390519283, 4877476173776988536342320311828696263130672487181279377017898384016913067447], [19158738776726544247375076914990453442393681204137928394703084554604020946156, 8838966038944239718776830893169993784941266569190762647602105458940759671046, 15841055675056961726562535738826657187257150256259049656297814118382798900330], [6791105788955237409910696778456677117299567759530622028056936860970302733454, 19516480770631177158413800613000966261943425973751817789103368225644264491681, 19528918645064868525603394027119909060251600450315424088474947017238199561962], [11433854958211537667608248090911737303705312996422090522678982956328662345996, 8470060095731409751896953649033812138663245111869929994400234811708918684838, 20612583059273736549724618966179438385599024040524129370608341264581984397830], [12384683274185221696079039355056770199722660900463108650648463095983831804204, 7337095227354145507397709769813874365503740234406516184076584548053869107989, 11771104020406483651211082047708912658771589843999665427298027453045381052593], [6274317223016468174875244425282937921326227038509280337890723934342709328877, 15969598893728197734425519215263317524649648377111743351094877425530717060838, 16588655041020675395963381736647415566589106153280187676175620288217478123963], [21732802692148663046567416503695650530590358481073971646354079945213180982669, 11508780587514047410819682899516977567691190661590992652581406116711904394761, 5600651717644254209220527692045572376033554629775888273911558878766709925230]];

        // Absorb
        uint s0 = 0;
        uint s1 = x;
        uint s2 = y;

        assembly {
            // Permutation
            // First Round
            {
                let r := 0
                for {} lt(r, N_FULL_ROUNDS) { r := add(r, 1) } {
                    // ARC
                    {
                        let base := mload(add(arc, mul(r, 0x20)))
                        let a0 := mload(base)
                        let a1 := mload(add(base, 0x20))
                        let a2 := mload(add(base, 0x40))

                        s0 := addmod(s0, a0, p)
                        s1 := addmod(s1, a1, p)
                        s2 := addmod(s2, a2, p)
                    }

                    //Sbox
                    {
                        let a := s0
                        let a2 := mulmod(a, a, p)
                        let a4 := mulmod(a2, a2, p)
                        s0 := mulmod(a, a4, p)

                        a := s1
                        a2 := mulmod(a, a, p)
                        a4 := mulmod(a2, a2, p)
                        s1 := mulmod(a, a4, p)

                        a := s2
                        a2 := mulmod(a, a, p)
                        a4 := mulmod(a2, a2, p)
                        s2 := mulmod(a, a4, p)
                    }

                    // MDS
                    {
                        let temp
                        let temp_s0 := s0
                        let temp_s1 := s1
                        let temp_s2 := s2

                        temp := addmod(
                            addmod(mul(temp_s0, MDS00), mul(temp_s1, MDS01), p),
                            mul(temp_s2, MDS02),
                            p
                        )
                        s0 := temp

                        temp := addmod(
                            addmod(mul(temp_s0, MDS10), mul(temp_s1, MDS11), p),
                            mul(temp_s2, MDS12),
                            p
                        )
                        s1 := temp

                        temp := addmod(
                            addmod(mul(temp_s0, MDS20), mul(temp_s1, MDS21), p),
                            mul(temp_s2, MDS22),
                            p
                        )
                        s2 := temp
                    }
                }
            }

            // Partial rounds
            {
                let r := 0
                for {} lt(r, N_PARTIAL_ROUNDS) { r := add(r, 1) } {
                    let r2 := add(r, N_FULL_ROUNDS)

                    // ARC
                    {
                        let base := mload(add(arc, mul(r2, 0x20)))
                        let a0 := mload(base)
                        let a1 := mload(add(base, 0x20))
                        let a2 := mload(add(base, 0x40))

                        s0 := addmod(s0, a0, p)
                        s1 := addmod(s1, a1, p)
                        s2 := addmod(s2, a2, p)
                    }

                    // Sbox
                    {
                        let a := s0
                        let a2 := mulmod(a, a, p)
                        let a4 := mulmod(a2, a2, p)
                        s0 := mulmod(a4, a, p)
                    }

                    // MDS
                    {
                        let temp
                        let temp_s0 := s0
                        let temp_s1 := s1
                        let temp_s2 := s2

                        temp := addmod(
                            addmod(mul(temp_s0, MDS00), mul(temp_s1, MDS01), p),
                            mul(temp_s2, MDS02),
                            p
                        )
                        s0 := temp

                        temp := addmod(
                            addmod(mul(temp_s0, MDS10), mul(temp_s1, MDS11), p),
                            mul(temp_s2, MDS12),
                            p
                        )
                        s1 := temp

                        temp := addmod(
                            addmod(mul(temp_s0, MDS20), mul(temp_s1, MDS21), p),
                            mul(temp_s2, MDS22),
                            p
                        )
                        s2 := temp
                    }
                }
            }

            // Final full rounds
            {
                let r := 0
                for {} lt(r, N_FULL_ROUNDS) { r := add(r, 1) } {
                    let r3 := add(add(r, N_FULL_ROUNDS), N_PARTIAL_ROUNDS)

                    // ARC
                    {
                        let base := mload(add(arc, mul(r3, 0x20)))
                        let a0 := mload(base)
                        let a1 := mload(add(base, 0x20))
                        let a2 := mload(add(base, 0x40))

                        s0 := addmod(s0, a0, p)
                        s1 := addmod(s1, a1, p)
                        s2 := addmod(s2, a2, p)
                    }

                    // Sbox
                    {
                        let a := s0
                        let a2 := mulmod(a, a, p)
                        let a4 := mulmod(a2, a2, p)
                        s0 := mulmod(a4, a, p)

                        a := s1
                        a2 := mulmod(a, a, p)
                        a4 := mulmod(a2, a2, p)
                        s1 := mulmod(a4, a, p)

                        a := s2
                        a2 := mulmod(a, a, p)
                        a4 := mulmod(a2, a2, p)
                        s2 := mulmod(a4, a, p)
                    }

                    // MDS
                    {
                        let temp
                        let temp_s0 := s0
                        let temp_s1 := s1
                        let temp_s2 := s2

                        temp := addmod(
                            addmod(mul(temp_s0, MDS00), mul(temp_s1, MDS01), p),
                            mul(temp_s2, MDS02),
                            p
                        )
                        s0 := temp

                        temp := addmod(
                            addmod(mul(temp_s0, MDS10), mul(temp_s1, MDS11), p),
                            mul(temp_s2, MDS12),
                            p
                        )
                        s1 := temp

                        temp := addmod(
                            addmod(mul(temp_s0, MDS20), mul(temp_s1, MDS21), p),
                            mul(temp_s2, MDS22),
                            p
                        )
                        s2 := temp
                    }
                }
            }
        }

        return s1;
    }
}
